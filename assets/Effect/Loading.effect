// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert
      frag: fs:frag
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties: 
        mainTexture:    { value: white }
        alphaThreshold: { value: 0.5 }
}%

CCProgram vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    v_uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(v_uv0);
    #endif
    v_color = a_color;

    return pos;
  }
}%

CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D mainTexture;
  #endif

  float circle(in vec2 uv, in float radius){
    return 1.0 - smoothstep(radius - 0.01 * radius, radius + 0.01 * radius, length(uv));
  }

  const float PI = 3.141592653;
  vec4 frag(){
    vec4 o = vec4(0, 0, 0, 0);
    #if USE_TEXTURE
      vec2 uv = v_uv0 - 0.5;

      float R = 0.35;
      float radius = 0.05;
      vec2 pos = vec2(0, 0);
      float rotation = 0.0;
      const float count = 12.0;
      float time = cc_time.x;

      for(float i = 0.0; i < count; i++){
        rotation = 2.0 * PI * i / count + time * 2.0 * PI / 4.0;
        pos = vec2(R * cos(rotation), R * sin(rotation));
        o.a += circle(uv - pos, radius * (sin(rotation * 0.45) + 1.0) / 3.0 + radius / 3.0);
        o.r += o.a * (sin(i / count + time + PI * 6.0 / 3.0) + 1.0) / 2.0;
        o.g += o.a * (sin(i / count + time + PI * 4.0 / 3.0) + 1.0) / 2.0;
        o.b += o.a * (sin(i / count + time + PI * 2.0 / 3.0) + 1.0) / 2.0;
      }
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    return o;
  }
}%

// CCProgram unlit-fs %{
//   precision highp float;
//   #include <output>
//   #include <cc-fog-fs>

//   in vec2 v_uv;
//   uniform sampler2D mainTexture;

//   uniform Constant {
//     vec4 mainColor;
//   };

//   vec4 frag () {
//     vec4 col = mainColor * texture(mainTexture, v_uv);
//     CC_APPLY_FOG(col);
//     return CCFragOutput(col);
//   }
// }%