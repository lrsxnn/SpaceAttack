// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - passes:
    - vert: vs:vert
      frag: fs:frag
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties: 
        alphaThreshold: { value: 0.5 }
}%

CCProgram vs %{
  precision highp float;
  #include <cc-global>

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    pos = cc_matView * pos;
    pos.xyz = floor(pos.xyz);
    pos = cc_matProj * pos;

    v_uv0 = a_texCoord;

    v_color = a_color;

    return pos;
  }
}%

CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <cc-global>

  in vec4 v_color;

  in vec2 v_uv0;

  float circle(in vec2 uv, in float radius){
    return 1.0 - smoothstep(radius - 0.01 * radius, radius + 0.01 * radius, length(uv));
  }

  const float PI = 3.141592653;
  vec4 frag(){
    vec4 o = vec4(0, 0, 0, 0);
    vec2 uv = v_uv0 - 0.5;

    float R = 0.35;
    float radius = 0.05;
    vec2 pos = vec2(0, 0);
    float rotation = 0.0;
    const float count = 12.0;
    float time = cc_time.x;

    for(float i = 0.0; i < count; i++){
      rotation = 2.0 * PI * i / count + time * 2.0 * PI / 4.0;
      pos = vec2(R * cos(rotation), R * sin(rotation));
      o.a += circle(uv - pos, radius * (sin(rotation * 0.45) + 1.0) / 3.0 + radius / 3.0);
      o.r += o.a * (sin(i / count + time + PI * 6.0 / 3.0) + 1.0) / 2.0;
      o.g += o.a * (sin(i / count + time + PI * 4.0 / 3.0) + 1.0) / 2.0;
      o.b += o.a * (sin(i / count + time + PI * 2.0 / 3.0) + 1.0) / 2.0;
    }

    o *= v_color;

    ALPHA_TEST(o);

    return o;
  }
}%